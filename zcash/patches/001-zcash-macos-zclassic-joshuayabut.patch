diff --git a/src/crypto/equihash.cpp b/src/crypto/equihash.cpp
index d22244aa..a723889e 100644
--- a/src/crypto/equihash.cpp
+++ b/src/crypto/equihash.cpp
@@ -19,6 +19,9 @@
 #include "crypto/equihash.h"
 #include "util.h"
 
+#ifdef __LP64__
+#include "compat/endian.h"
+#endif
 #include <algorithm>
 #include <iostream>
 #include <stdexcept>
diff --git a/src/gtest/test_transaction.cpp b/src/gtest/test_transaction.cpp
index a339f765..a72a23b2 100644
--- a/src/gtest/test_transaction.cpp
+++ b/src/gtest/test_transaction.cpp
@@ -38,8 +38,13 @@ TEST(Transaction, JSDescriptionRandomized) {
         libzcash::JSOutput(addr, 50),
         libzcash::JSOutput(addr, 50)
     };
+#ifdef __LP64__
+    boost::array<uint64_t, ZC_NUM_JS_INPUTS> inputMap;
+    boost::array<uint64_t, ZC_NUM_JS_OUTPUTS> outputMap;
+#else
     boost::array<size_t, ZC_NUM_JS_INPUTS> inputMap;
     boost::array<size_t, ZC_NUM_JS_OUTPUTS> outputMap;
+#endif
 
     {
         auto jsdesc = JSDescription::Randomized(
@@ -48,12 +53,22 @@ TEST(Transaction, JSDescriptionRandomized) {
             inputMap, outputMap,
             0, 0, false);
 
+#ifdef __LP64__
+        std::set<uint64_t> inputSet(inputMap.begin(), inputMap.end());
+        std::set<uint64_t> expectedInputSet {0, 1};
+#else
         std::set<size_t> inputSet(inputMap.begin(), inputMap.end());
         std::set<size_t> expectedInputSet {0, 1};
+#endif
         EXPECT_EQ(expectedInputSet, inputSet);
 
+#ifdef __LP64__
+        std::set<uint64_t> outputSet(outputMap.begin(), outputMap.end());
+        std::set<uint64_t> expectedOutputSet {0, 1};
+#else
         std::set<size_t> outputSet(outputMap.begin(), outputMap.end());
         std::set<size_t> expectedOutputSet {0, 1};
+#endif
         EXPECT_EQ(expectedOutputSet, outputSet);
     }
 
@@ -64,8 +79,13 @@ TEST(Transaction, JSDescriptionRandomized) {
             inputMap, outputMap,
             0, 0, false, GenZero);
 
+#ifdef __LP64__
+        boost::array<uint64_t, ZC_NUM_JS_INPUTS> expectedInputMap {1, 0};
+        boost::array<uint64_t, ZC_NUM_JS_OUTPUTS> expectedOutputMap {1, 0};
+#else
         boost::array<size_t, ZC_NUM_JS_INPUTS> expectedInputMap {1, 0};
         boost::array<size_t, ZC_NUM_JS_OUTPUTS> expectedOutputMap {1, 0};
+#endif
         EXPECT_EQ(expectedInputMap, inputMap);
         EXPECT_EQ(expectedOutputMap, outputMap);
     }
@@ -77,8 +97,13 @@ TEST(Transaction, JSDescriptionRandomized) {
             inputMap, outputMap,
             0, 0, false, GenMax);
 
+#ifdef __LP64__
+        boost::array<uint64_t, ZC_NUM_JS_INPUTS> expectedInputMap {0, 1};
+        boost::array<uint64_t, ZC_NUM_JS_OUTPUTS> expectedOutputMap {0, 1};
+#else
         boost::array<size_t, ZC_NUM_JS_INPUTS> expectedInputMap {0, 1};
         boost::array<size_t, ZC_NUM_JS_OUTPUTS> expectedOutputMap {0, 1};
+#endif
         EXPECT_EQ(expectedInputMap, inputMap);
         EXPECT_EQ(expectedOutputMap, outputMap);
     }
diff --git a/src/netbase.cpp b/src/netbase.cpp
index c88a227f..530e29dc 100644
--- a/src/netbase.cpp
+++ b/src/netbase.cpp
@@ -16,6 +16,10 @@
 #include "util.h"
 #include "utilstrencodings.h"
 
+#ifdef __APPLE__
+#undef HAVE_GETADDRINFO_A
+#endif
+
 #ifdef HAVE_GETADDRINFO_A
 #include <netdb.h>
 #endif
diff --git a/src/primitives/transaction.cpp b/src/primitives/transaction.cpp
index f6236a2f..0b82c0f4 100644
--- a/src/primitives/transaction.cpp
+++ b/src/primitives/transaction.cpp
@@ -47,8 +47,13 @@ JSDescription JSDescription::Randomized(
             const uint256& anchor,
             boost::array<libzcash::JSInput, ZC_NUM_JS_INPUTS>& inputs,
             boost::array<libzcash::JSOutput, ZC_NUM_JS_OUTPUTS>& outputs,
+#ifdef __LP64__
+            boost::array<uint64_t, ZC_NUM_JS_INPUTS>& inputMap,
+            boost::array<uint64_t, ZC_NUM_JS_OUTPUTS>& outputMap,
+#else
             boost::array<size_t, ZC_NUM_JS_INPUTS>& inputMap,
             boost::array<size_t, ZC_NUM_JS_OUTPUTS>& outputMap,
+#endif
             CAmount vpub_old,
             CAmount vpub_new,
             bool computeProof,
diff --git a/src/primitives/transaction.h b/src/primitives/transaction.h
index 111237cb..69d3e8a3 100644
--- a/src/primitives/transaction.h
+++ b/src/primitives/transaction.h
@@ -86,8 +86,13 @@ public:
             const uint256& rt,
             boost::array<libzcash::JSInput, ZC_NUM_JS_INPUTS>& inputs,
             boost::array<libzcash::JSOutput, ZC_NUM_JS_OUTPUTS>& outputs,
+#ifdef __LP64__
+            boost::array<uint64_t, ZC_NUM_JS_INPUTS>& inputMap,
+            boost::array<uint64_t, ZC_NUM_JS_OUTPUTS>& outputMap,
+#else
             boost::array<size_t, ZC_NUM_JS_INPUTS>& inputMap,
             boost::array<size_t, ZC_NUM_JS_OUTPUTS>& outputMap,
+#endif
             CAmount vpub_old,
             CAmount vpub_new,
             bool computeProof = true, // Set to false in some tests
diff --git a/src/wallet/asyncrpcoperation_sendmany.cpp b/src/wallet/asyncrpcoperation_sendmany.cpp
index 1691452b..41d975d3 100644
--- a/src/wallet/asyncrpcoperation_sendmany.cpp
+++ b/src/wallet/asyncrpcoperation_sendmany.cpp
@@ -982,8 +982,13 @@ UniValue AsyncRPCOperation_sendmany::perform_joinsplit(
             {info.vjsin[0], info.vjsin[1]};
     boost::array<libzcash::JSOutput, ZC_NUM_JS_OUTPUTS> outputs
             {info.vjsout[0], info.vjsout[1]};
+#ifdef __LP64__
+    boost::array<uint64_t, ZC_NUM_JS_INPUTS> inputMap;
+    boost::array<uint64_t, ZC_NUM_JS_OUTPUTS> outputMap;
+#else
     boost::array<size_t, ZC_NUM_JS_INPUTS> inputMap;
     boost::array<size_t, ZC_NUM_JS_OUTPUTS> outputMap;
+#endif
     JSDescription jsdesc = JSDescription::Randomized(
             *pzcashParams,
             joinSplitPubKey_,
diff --git a/src/wallet/wallet.h b/src/wallet/wallet.h
index e73d05cc..0333fb73 100644
--- a/src/wallet/wallet.h
+++ b/src/wallet/wallet.h
@@ -160,7 +160,11 @@ public:
     // Transaction hash
     uint256 hash;
     // Index into CTransaction.vjoinsplit
+#ifdef __LP64__
+    uint64_t js;
+#else
     size_t js;
+#endif
     // Index into JSDescription fields of length ZC_NUM_JS_OUTPUTS
     uint8_t n;
 
