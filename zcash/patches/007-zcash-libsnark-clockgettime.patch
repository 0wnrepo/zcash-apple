diff --git a/depends/packages/libsnark.mk b/depends/packages/libsnark.mk
index d19cc1a..4d16439 100644
--- a/depends/packages/libsnark.mk
+++ b/depends/packages/libsnark.mk
@@ -7,10 +7,11 @@ $(package)_sha256_hash=dad153fe46e2e1f33557a195cbe7d69aed8b19ed9befc08ddcb8c6d3c
 $(package)_git_commit=9ada3f84ab484c57b2247c2f41091fd6a0916573
 
 $(package)_dependencies=libgmp libsodium
-$(package)_patches=no-ar-script.patch
+$(package)_patches=no-ar-script.patch clock-gettime.patch
 
 define $(package)_preprocess_cmds
-  patch -p1 < $($(package)_patch_dir)/no-ar-script.patch
+  patch -p1 < $($(package)_patch_dir)/no-ar-script.patch && \
+  patch -p1 < $($(package)_patch_dir)/clock-gettime.patch
 endef
 
 define $(package)_build_cmds
diff --git a/depends/patches/libsnark/clock-gettime.patch b/depends/patches/libsnark/clock-gettime.patch
new file mode 100644
index 0000000..e5a60b0
--- /dev/null
+++ b/depends/patches/libsnark/clock-gettime.patch
@@ -0,0 +1,39 @@
+diff --git a/src/common/profiling.cpp b/src/common/profiling.cpp
+index d227203..9e96de2 100644
+--- a/src/common/profiling.cpp
++++ b/src/common/profiling.cpp
+@@ -26,6 +26,13 @@
+ #include <proc/readproc.h>
+ #endif
+ 
++#ifdef __MACH__
++#include <time.h>
++#include <sys/time.h>
++#include <mach/clock.h>
++#include <mach/mach.h>
++#endif
++
+ namespace libsnark {
+ 
+ long long get_nsec_time()
+@@ -38,10 +45,20 @@ long long get_nsec_time()
+ long long get_nsec_cpu_time()
+ {
+     ::timespec ts;
++#ifdef __MACH__
++    clock_serv_t cclock;
++    mach_timespec_t mts;
++    host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);
++    clock_get_time(cclock, &mts);
++    mach_port_deallocate(mach_task_self(), cclock);
++    ts.tv_sec = mts.tv_sec;
++    ts.tv_nsec = mts.tv_nsec;
++#else
+     if ( ::clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ts) )
+         throw ::std::runtime_error("clock_gettime(CLOCK_PROCESS_CPUTIME_ID) failed");
+         // If we expected this to work, don't silently ignore failures, because that would hide the problem and incur an unnecessarily system-call overhead. So if we ever observe this exception, we should probably add a suitable #ifdef .
+         //TODO: clock_gettime(CLOCK_PROCESS_CPUTIME_ID) is not supported by native Windows. What about Cygwin? Should we #ifdef on CLOCK_PROCESS_CPUTIME_ID or on __linux__?
++#endif
+     return ts.tv_sec * 1000000000ll + ts.tv_nsec;
+ }
+ 
